diff --git a/sslcontext-kickstart-for-apache5/src/test/java/nl/altindag/ssl/SSLFactoryIT.java b/sslcontext-kickstart-for-apache5/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
index 02c0448..988c700 100644
--- a/sslcontext-kickstart-for-apache5/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
+++ b/sslcontext-kickstart-for-apache5/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
@@ -17,7 +17,6 @@ package nl.altindag.ssl;
 
 import nl.altindag.log.LogCaptor;
 import nl.altindag.ssl.util.Apache5SslUtils;
-import nl.altindag.ssl.util.KeyStoreUtils;
 import org.apache.hc.client5.http.async.methods.SimpleHttpResponse;
 import org.apache.hc.client5.http.async.methods.SimpleResponseConsumer;
 import org.apache.hc.client5.http.classic.HttpClient;
@@ -59,7 +58,7 @@ class SSLFactoryIT {
         SSLFactory sslFactory = SSLFactory.builder()
                 .withIdentityMaterial("keystore/badssl-identity.p12", "badssl.com".toCharArray())
                 .withTrustMaterial("keystore/badssl-truststore.p12", "badssl.com".toCharArray())
-                .withTrustMaterial(KeyStoreUtils.createKeyStore()) // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
+                .withDefaultTrustMaterial() // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
                 .build();
 
         LayeredConnectionSocketFactory socketFactory = Apache5SslUtils.toSocketFactory(sslFactory);
@@ -87,13 +86,13 @@ class SSLFactoryIT {
 
     @Test
     @Tag("it-with-badssl.com")
-    void executeHttpsRequestWithMutualAuthenticationForAsyncClient() throws IOException, URISyntaxException, InterruptedException, ExecutionException, TimeoutException {
+    void executeHttpsRequestWithMutualAuthenticationForAsyncClient() throws URISyntaxException, InterruptedException, ExecutionException, TimeoutException {
         LogCaptor logCaptor = LogCaptor.forName("nl.altindag.ssl");
 
         SSLFactory sslFactory = SSLFactory.builder()
                 .withIdentityMaterial("keystore/badssl-identity.p12", "badssl.com".toCharArray())
                 .withTrustMaterial("keystore/badssl-truststore.p12", "badssl.com".toCharArray())
-                .withTrustMaterial(KeyStoreUtils.createKeyStore()) // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
+                .withDefaultTrustMaterial() // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
                 .build();
 
         PoolingAsyncClientConnectionManager connectionManager = PoolingAsyncClientConnectionManagerBuilder.create()
diff --git a/sslcontext-kickstart-for-jetty/src/test/java/nl/altindag/ssl/SSLFactoryIT.java b/sslcontext-kickstart-for-jetty/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
index bc3be6e..caaefb4 100644
--- a/sslcontext-kickstart-for-jetty/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
+++ b/sslcontext-kickstart-for-jetty/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
@@ -17,7 +17,6 @@ package nl.altindag.ssl;
 
 import nl.altindag.log.LogCaptor;
 import nl.altindag.ssl.util.JettySslUtils;
-import nl.altindag.ssl.util.KeyStoreUtils;
 import org.eclipse.jetty.client.HttpClient;
 import org.eclipse.jetty.client.api.ContentResponse;
 import org.eclipse.jetty.http.HttpMethod;
@@ -41,7 +40,7 @@ class SSLFactoryIT {
         SSLFactory sslFactory = SSLFactory.builder()
                 .withIdentityMaterial("keystore/badssl-identity.p12", "badssl.com".toCharArray())
                 .withTrustMaterial("keystore/badssl-truststore.p12", "badssl.com".toCharArray())
-                .withTrustMaterial(KeyStoreUtils.createKeyStore()) // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
+                .withDefaultTrustMaterial() // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
                 .build();
 
         SslContextFactory.Client sslContextFactory = JettySslUtils.forClient(sslFactory);
diff --git a/sslcontext-kickstart-for-netty/src/test/java/nl/altindag/ssl/SSLFactoryIT.java b/sslcontext-kickstart-for-netty/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
index cddc3f3..c68d609 100644
--- a/sslcontext-kickstart-for-netty/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
+++ b/sslcontext-kickstart-for-netty/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
@@ -17,7 +17,6 @@ package nl.altindag.ssl;
 
 import io.netty.handler.ssl.SslContext;
 import nl.altindag.log.LogCaptor;
-import nl.altindag.ssl.util.KeyStoreUtils;
 import nl.altindag.ssl.util.NettySslUtils;
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
@@ -44,7 +43,7 @@ class SSLFactoryIT {
         SSLFactory sslFactory = SSLFactory.builder()
                 .withIdentityMaterial("keystore/badssl-identity.p12", "badssl.com".toCharArray())
                 .withTrustMaterial("keystore/badssl-truststore.p12", "badssl.com".toCharArray())
-                .withTrustMaterial(KeyStoreUtils.createKeyStore()) // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
+                .withDefaultTrustMaterial() // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
                 .build();
 
         SslContext sslContext = NettySslUtils.forClient(sslFactory).build();
diff --git a/sslcontext-kickstart-for-pem/src/test/java/nl/altindag/ssl/SSLFactoryIT.java b/sslcontext-kickstart-for-pem/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
index 146ad27..d779861 100644
--- a/sslcontext-kickstart-for-pem/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
+++ b/sslcontext-kickstart-for-pem/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
@@ -16,7 +16,6 @@
 package nl.altindag.ssl;
 
 import nl.altindag.log.LogCaptor;
-import nl.altindag.ssl.util.KeyStoreUtils;
 import nl.altindag.ssl.util.PemUtils;
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
@@ -49,7 +48,7 @@ class SSLFactoryIT {
         SSLFactory sslFactory = SSLFactory.builder()
                 .withIdentityMaterial(keyManager)
                 .withTrustMaterial(trustManager)
-                .withTrustMaterial(KeyStoreUtils.createKeyStore()) // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
+                .withDefaultTrustMaterial() // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
                 .build();
 
         HttpsURLConnection connection = (HttpsURLConnection) new URL(BADSSL_URL).openConnection();
@@ -79,7 +78,7 @@ class SSLFactoryIT {
         SSLFactory sslFactory = SSLFactory.builder()
                 .withIdentityMaterial(keyManager)
                 .withTrustMaterial(trustManager)
-                .withTrustMaterial(KeyStoreUtils.createKeyStore()) // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
+                .withDefaultTrustMaterial() // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
                 .build();
 
         HttpsURLConnection connection = (HttpsURLConnection) new URL(BADSSL_URL).openConnection();
@@ -322,7 +321,7 @@ class SSLFactoryIT {
         SSLFactory sslFactory = SSLFactory.builder()
                 .withIdentityMaterial(keyManager)
                 .withTrustMaterial(trustManager)
-                .withTrustMaterial(KeyStoreUtils.createKeyStore()) // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
+                .withDefaultTrustMaterial() // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
                 .build();
 
         HttpsURLConnection connection = (HttpsURLConnection) new URL(BADSSL_URL).openConnection();
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/TrustManagerUtils.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/TrustManagerUtils.java
index 0b69332..46cedba 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/TrustManagerUtils.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/TrustManagerUtils.java
@@ -27,6 +27,8 @@ import nl.altindag.ssl.trustmanager.HotSwappableX509ExtendedTrustManager;
 import nl.altindag.ssl.trustmanager.TrustManagerFactoryWrapper;
 import nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager;
 import nl.altindag.ssl.trustmanager.X509TrustManagerWrapper;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import javax.net.ssl.ManagerFactoryParameters;
 import javax.net.ssl.TrustManager;
@@ -43,6 +45,7 @@ import java.security.cert.X509Certificate;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import java.util.stream.Collectors;
@@ -265,17 +268,16 @@ public final class TrustManagerUtils {
     }
 
     private static List<X509ExtendedTrustManager> unwrapIfPossible(X509ExtendedTrustManager trustManager) {
-        List<X509ExtendedTrustManager> trustManagers = new ArrayList<>();
         if (trustManager instanceof CompositeX509ExtendedTrustManager) {
+            List<X509ExtendedTrustManager> trustManagers = new ArrayList<>();
             for (X509ExtendedTrustManager innerTrustManager : ((CompositeX509ExtendedTrustManager) trustManager).getTrustManagers()) {
                 List<X509ExtendedTrustManager> unwrappedTrustManagers = TrustManagerUtils.unwrapIfPossible(innerTrustManager);
                 trustManagers.addAll(unwrappedTrustManagers);
             }
+            return trustManagers;
         } else {
-            trustManagers.add(trustManager);
+            return Collections.singletonList(trustManager);
         }
-
-        return trustManagers;
     }
 
     public static TrustManagerBuilder trustManagerBuilder() {
@@ -284,7 +286,9 @@ public final class TrustManagerUtils {
 
     public static final class TrustManagerBuilder {
 
+        private static final Logger LOGGER = LoggerFactory.getLogger(TrustManagerBuilder.class);
         private static final String EMPTY_TRUST_MANAGER_EXCEPTION = "Input does not contain TrustManager";
+        private static final String NO_TRUSTED_CERTIFICATES_EXCEPTION = "The provided trust material does not contain any trusted certificate.";
 
         private TrustManagerBuilder() {}
 
@@ -360,21 +364,42 @@ public final class TrustManagerUtils {
 
             X509ExtendedTrustManager baseTrustManager;
 
-            Optional<X509ExtendedTrustManager> unsafeTrustManager = trustManagers.stream()
+            Optional<X509ExtendedTrustManager> maybeUnsafeTrustManager = trustManagers.stream()
                     .filter(UnsafeX509ExtendedTrustManager.class::isInstance)
                     .findAny();
 
-            if (unsafeTrustManager.isPresent()) {
-                baseTrustManager = unsafeTrustManager.get();
+            Optional<X509ExtendedTrustManager> maybeDummyTrustManager = trustManagers.stream()
+                    .filter(DummyX509ExtendedTrustManager.class::isInstance)
+                    .findAny();
+
+            if (maybeUnsafeTrustManager.isPresent()) {
+                if (trustManagers.size() > 1) {
+                    LOGGER.debug("Unsafe TrustManager is being used therefore other trust managers will not be included for constructing the base trust manager");
+                }
+
+                baseTrustManager = maybeUnsafeTrustManager.get();
+            } else if (maybeDummyTrustManager.isPresent()) {
+                if (trustManagers.size() > 1) {
+                    LOGGER.debug("Dummy TrustManager is being used therefore other trust managers will not be included for constructing the base trust manager");
+                }
+
+                baseTrustManager = maybeDummyTrustManager.get();
             } else {
                 if (trustManagers.size() == 1) {
                     baseTrustManager = trustManagers.get(0);
                 } else {
-                    baseTrustManager = trustManagers.stream()
+                    List<X509ExtendedTrustManager> trustManagersContainingTrustedCertificates = trustManagers.stream()
                             .map(TrustManagerUtils::unwrapIfPossible)
                             .flatMap(Collection::stream)
                             .filter(trustManager -> trustManager.getAcceptedIssuers().length > 0)
-                            .collect(Collectors.collectingAndThen(Collectors.toList(), CompositeX509ExtendedTrustManager::new));
+                            .collect(Collectors.toList());
+
+                    ValidationUtils.requireNotEmpty(trustManagersContainingTrustedCertificates, NO_TRUSTED_CERTIFICATES_EXCEPTION);
+                    if (trustManagersContainingTrustedCertificates.size() == 1) {
+                        baseTrustManager = trustManagersContainingTrustedCertificates.get(0);
+                    } else {
+                        baseTrustManager = new CompositeX509ExtendedTrustManager(trustManagersContainingTrustedCertificates);
+                    }
                 }
 
                 if (chainAndAuthTypeValidator != null
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/ValidationUtils.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/ValidationUtils.java
index 71450b4..63455f7 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/ValidationUtils.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/ValidationUtils.java
@@ -51,6 +51,17 @@ public final class ValidationUtils {
         return maybeNull;
     }
 
+    public static <T> T[] requireNotEmpty(T[] maybeNull, String message) {
+        return requireNotEmpty(maybeNull, () -> new IllegalArgumentException(message));
+    }
+
+    public static <T> T[] requireNotEmpty(T[] maybeNull, Supplier<RuntimeException> exceptionSupplier) {
+        if (maybeNull == null || maybeNull.length == 0) {
+            throw exceptionSupplier.get();
+        }
+        return maybeNull;
+    }
+
     public static String requireNotBlank(String maybeNull, String message) {
         return requireNotBlank(maybeNull, () -> new IllegalArgumentException(message));
     }
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
index 7c5c955..461c1b6 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
@@ -17,7 +17,6 @@ package nl.altindag.ssl;
 
 import com.sun.net.httpserver.HttpsServer;
 import nl.altindag.log.LogCaptor;
-import nl.altindag.ssl.util.KeyStoreUtils;
 import nl.altindag.ssl.util.SSLFactoryUtils;
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
@@ -57,7 +56,7 @@ class SSLFactoryIT {
         SSLFactory sslFactory = SSLFactory.builder()
                 .withIdentityMaterial(KEYSTORE_LOCATION + "badssl-identity.p12", "badssl.com".toCharArray())
                 .withTrustMaterial(KEYSTORE_LOCATION + "badssl-truststore.p12", "badssl.com".toCharArray())
-                .withTrustMaterial(KeyStoreUtils.createKeyStore()) // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
+                .withDefaultTrustMaterial() // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
                 .build();
 
         HttpsURLConnection connection = (HttpsURLConnection) new URL("https://client.badssl.com/").openConnection();
@@ -83,7 +82,7 @@ class SSLFactoryIT {
 
         SSLFactory sslFactory = SSLFactory.builder()
                 .withIdentityMaterial(KEYSTORE_LOCATION + "badssl-identity.p12", "badssl.com".toCharArray())
-                .withTrustMaterial(KeyStoreUtils.createKeyStore()) // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
+                .withDefaultTrustMaterial() // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
                 .withTrustMaterial(KEYSTORE_LOCATION + "badssl-truststore.p12", "badssl.com".toCharArray())
                 .build();
 
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java
index df39097..cc09929 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java
@@ -15,9 +15,11 @@
  */
 package nl.altindag.ssl.util;
 
+import nl.altindag.log.LogCaptor;
 import nl.altindag.ssl.exception.GenericSecurityException;
 import nl.altindag.ssl.exception.GenericTrustManagerException;
 import nl.altindag.ssl.trustmanager.CompositeX509ExtendedTrustManager;
+import nl.altindag.ssl.trustmanager.DummyX509ExtendedTrustManager;
 import nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager;
 import nl.altindag.ssl.trustmanager.X509TrustManagerWrapper;
 import org.junit.jupiter.api.Test;
@@ -370,6 +372,8 @@ class TrustManagerUtilsShould {
 
     @Test
     void createOnlyUnsafeTrustManagerWhileProvidingMultipleTrustManagers() {
+        LogCaptor logCaptor = LogCaptor.forRoot();
+
         KeyStore trustStore = KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + TRUSTSTORE_FILE_NAME, TRUSTSTORE_PASSWORD);
 
         X509ExtendedTrustManager trustManager = TrustManagerUtils.combine(
@@ -378,6 +382,21 @@ class TrustManagerUtilsShould {
         );
 
         assertThat(trustManager).isInstanceOf(UnsafeX509ExtendedTrustManager.class);
+
+        assertThat(logCaptor.getDebugLogs()).contains("Unsafe TrustManager is being used therefore other trust managers will not be included for constructing the base trust manager");
+    }
+
+    @Test
+    void doNotLogAnythingWhenUnsafeTrustManagerIsBeingUsedWithoutAdditionalTrustManagers() {
+        LogCaptor logCaptor = LogCaptor.forRoot();
+
+        X509ExtendedTrustManager trustManager = TrustManagerUtils.combine(
+                TrustManagerUtils.createUnsafeTrustManager()
+        );
+
+        assertThat(trustManager).isInstanceOf(UnsafeX509ExtendedTrustManager.class);
+
+        assertThat(logCaptor.getLogs()).isEmpty();
     }
 
     @Test
@@ -386,7 +405,7 @@ class TrustManagerUtilsShould {
         KeyStore trustStoreTwo = KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + "truststore-containing-github.jks", TRUSTSTORE_PASSWORD);
         KeyStore emptyTrustStore = KeyStoreUtils.createKeyStore();
 
-        X509ExtendedTrustManager trustManager = TrustManagerUtils.createTrustManager(trustStoreOne, trustStoreOne, emptyTrustStore);
+        X509ExtendedTrustManager trustManager = TrustManagerUtils.createTrustManager(trustStoreOne, trustStoreTwo, emptyTrustStore);
 
         assertThat(trustManager).isInstanceOf(CompositeX509ExtendedTrustManager.class);
 
@@ -394,14 +413,62 @@ class TrustManagerUtilsShould {
         assertThat(compositeX509ExtendedTrustManager.getTrustManagers()).hasSize(2);
     }
 
+    @Test
+    void ignoreOtherTrustMaterialIfDummyTrustManagerIsPresent() {
+        LogCaptor logCaptor = LogCaptor.forRoot();
+
+        KeyStore trustStoreOne = KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + TRUSTSTORE_FILE_NAME, TRUSTSTORE_PASSWORD);
+        KeyStore trustStoreTwo = KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + "truststore-containing-github.jks", TRUSTSTORE_PASSWORD);
+
+        X509ExtendedTrustManager trustManager = TrustManagerUtils.trustManagerBuilder()
+                .withTrustStore(trustStoreOne)
+                .withTrustStore(trustStoreTwo)
+                .withTrustManager(TrustManagerUtils.createDummyTrustManager())
+                .build();
+
+        assertThat(trustManager).isInstanceOf(DummyX509ExtendedTrustManager.class);
+        assertThat(logCaptor.getDebugLogs()).contains("Dummy TrustManager is being used therefore other trust managers will not be included for constructing the base trust manager");
+    }
+
+    @Test
+    void doNotLogAnythingWhenDummyTrustManagerIsBeingUsedWithoutAdditionalTrustManagers() {
+        LogCaptor logCaptor = LogCaptor.forRoot();
+
+        X509ExtendedTrustManager trustManager = TrustManagerUtils.combine(
+                TrustManagerUtils.createDummyTrustManager()
+        );
+
+        assertThat(trustManager).isInstanceOf(DummyX509ExtendedTrustManager.class);
+
+        assertThat(logCaptor.getLogs()).isEmpty();
+    }
+
+    @Test
+    void notCombineIfOnlyOneTrustManagerContainsTrustedCertificates() {
+        X509ExtendedTrustManager emptyTrustManager = TrustManagerUtils.createTrustManager(KeyStoreUtils.createKeyStore());
+        X509ExtendedTrustManager filledTrustManager = TrustManagerUtils.createTrustManager(KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + TRUSTSTORE_FILE_NAME, TRUSTSTORE_PASSWORD));
+
+        X509ExtendedTrustManager trustManager = TrustManagerUtils.combine(emptyTrustManager, filledTrustManager);
+
+        assertThat(trustManager).isNotInstanceOf(CompositeX509ExtendedTrustManager.class);
+    }
+
     private CertPathTrustManagerParameters createTrustManagerParameters(KeyStore trustStore) throws NoSuchAlgorithmException, KeyStoreException, InvalidAlgorithmParameterException {
         CertPathBuilder certPathBuilder = CertPathBuilder.getInstance("PKIX");
         PKIXRevocationChecker revocationChecker = (PKIXRevocationChecker) certPathBuilder.getRevocationChecker();
         revocationChecker.setOptions(EnumSet.of(PKIXRevocationChecker.Option.NO_FALLBACK));
         PKIXBuilderParameters pkixParams = new PKIXBuilderParameters(trustStore, new X509CertSelector());
         pkixParams.addCertPathChecker(revocationChecker);
-        CertPathTrustManagerParameters certPathTrustManagerParameters = new CertPathTrustManagerParameters(pkixParams);
-        return certPathTrustManagerParameters;
+        return new CertPathTrustManagerParameters(pkixParams);
+    }
+
+    @Test
+    void throwExceptionWhenMultipleTrustManagersCombinedDontHaveTrustedCertificates() {
+        X509ExtendedTrustManager trustManagerOne = TrustManagerUtils.createTrustManager(KeyStoreUtils.createKeyStore());
+        X509ExtendedTrustManager trustManagerTwo = TrustManagerUtils.createTrustManager(KeyStoreUtils.createKeyStore());
+
+        assertThatThrownBy(() -> TrustManagerUtils.combine(trustManagerOne, trustManagerTwo))
+                .hasMessageContaining("The provided trust material does not contain any trusted certificate.");
     }
 
     @Test
