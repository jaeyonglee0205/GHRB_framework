diff --git a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/Difference.java b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/Difference.java
index 13d9bbddc..074acdf24 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/Difference.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/Difference.java
@@ -624,7 +624,7 @@ public class Difference {
      */
     private int getArrayLevel(DifferenceElement element) {
         CsmElement csmElem = element.getElement();
-        if (csmElem instanceof LexicalDifferenceCalculator.CsmChild && ((LexicalDifferenceCalculator.CsmChild) csmElem).getChild() instanceof ArrayType) {
+        if (isArrayType(element)) {
             Node child = ((LexicalDifferenceCalculator.CsmChild) csmElem).getChild();
             return ((ArrayType) child).getArrayLevel();
         }
@@ -939,24 +939,111 @@ public class Difference {
         return GeneratedJavaParserConstants.tokenImage[kind];
     }
 
-    private Map<Integer, Integer> getCorrespondanceBetweenNextOrderAndPreviousOrder(CsmMix elementsFromPreviousOrder, CsmMix elementsFromNextOrder) {
-        Map<Integer, Integer> correspondanceBetweenNextOrderAndPreviousOrder = new HashMap<>();
-        List<CsmElement> nextOrderElements = elementsFromNextOrder.getElements();
-        List<CsmElement> previousOrderElements = elementsFromPreviousOrder.getElements();
-        WrappingRangeIterator piNext = new WrappingRangeIterator(previousOrderElements.size());
-        for (int ni = 0; ni < nextOrderElements.size(); ni++) {
-            boolean found = false;
-            CsmElement ne = nextOrderElements.get(ni);
-            for (int counter = 0; counter < previousOrderElements.size() && !found; counter++) {
-                Integer pi = piNext.next();
-                CsmElement pe = previousOrderElements.get(pi);
-                if (!correspondanceBetweenNextOrderAndPreviousOrder.values().contains(pi) && DifferenceElementCalculator.matching(ne, pe)) {
-                    found = true;
-                    correspondanceBetweenNextOrderAndPreviousOrder.put(ni, pi);
-                }
-            }
-        }
-        return correspondanceBetweenNextOrderAndPreviousOrder;
+	/*
+	 * Considering that the lists of elements are ordered, We can find the common
+	 * elements by starting with the list before the modifications and, for each
+	 * element, by going through the list of elements containing the modifications.
+	 * 
+	 * We can find the common elements by starting with the list before the
+	 * modifications (L1) and, for each element, by going through the list of elements
+	 * containing the modifications (L2).
+	 * 
+	 * If element A in list L1 is not found in list L2, it is a deleted element. 
+	 * If element A of list L1 is found in list L2, it is a kept element. In this
+	 * case the search for the next element of the list L1 must start from the
+	 * position of the last element kept {@code syncNextIndex}.
+	 */
+	private Map<Integer, Integer> getCorrespondanceBetweenNextOrderAndPreviousOrder(CsmMix elementsFromPreviousOrder,
+			CsmMix elementsFromNextOrder) {
+		Map<Integer, Integer> correspondanceBetweenNextOrderAndPreviousOrder = new HashMap<>();
+		ReadOnlyListIterator<CsmElement> previousOrderElementsIterator = new ReadOnlyListIterator(
+				elementsFromPreviousOrder.getElements());
+		int syncNextIndex = 0;
+		while (previousOrderElementsIterator.hasNext()) {
+			CsmElement pe = previousOrderElementsIterator.next();
+			ReadOnlyListIterator<CsmElement> nextOrderElementsIterator = new ReadOnlyListIterator(
+					elementsFromNextOrder.getElements(), syncNextIndex);
+			while (nextOrderElementsIterator.hasNext()) {
+				CsmElement ne = nextOrderElementsIterator.next();
+				if (!correspondanceBetweenNextOrderAndPreviousOrder.values().contains(previousOrderElementsIterator.index())
+						&& DifferenceElementCalculator.matching(ne, pe)) {
+					correspondanceBetweenNextOrderAndPreviousOrder.put(nextOrderElementsIterator.index(),
+							previousOrderElementsIterator.index());
+					// set the position to start on the next {@code nextOrderElementsIterator} iteration
+					syncNextIndex = nextOrderElementsIterator.index(); 
+					break;
+				}
+			}
+		}
+		return correspondanceBetweenNextOrderAndPreviousOrder;
+	}
+    
+    /*
+     * A list iterator which does not allow to modify the list 
+     * and which provides a method to know the current positioning 
+     */
+    private class ReadOnlyListIterator<T> implements ListIterator<T> {
+    	ListIterator<T> elements;
+    	public ReadOnlyListIterator(List<T> elements) {
+    		this(elements, 0);
+    	}
+    	
+    	public ReadOnlyListIterator(List<T> elements, int index) {
+    		this.elements = elements.listIterator(index);
+    	}
+
+		@Override
+		public boolean hasNext() {
+			return elements.hasNext();
+		}
+
+		@Override
+		public T next() {
+			return elements.next();
+		}
+
+		@Override
+		public boolean hasPrevious() {
+			return elements.hasPrevious();
+		}
+
+		@Override
+		public T previous() {
+			return elements.previous();
+		}
+
+		@Override
+		public int nextIndex() {
+			return elements.nextIndex();
+		}
+
+		@Override
+		public int previousIndex() {
+			return elements.previousIndex();
+		}
+		
+		/*
+		 * Returns the current index in the underlying list
+		 */
+		public int index() {
+			return elements.nextIndex() - 1;
+		}
+		
+		@Override
+		public void remove() {
+			throw new UnsupportedOperationException();
+		}
+
+		@Override
+		public void set(T e) {
+			throw new UnsupportedOperationException();
+		}
+
+		@Override
+		public void add(T e) {
+			throw new UnsupportedOperationException();
+		}
+    	
     }
 
     /*
diff --git a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/WrappingRangeIterator.java b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/WrappingRangeIterator.java
deleted file mode 100644
index f9411f971..000000000
--- a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/WrappingRangeIterator.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Copyright (C) 2007-2010 JÃºlio Vilmar Gesser.
- * Copyright (C) 2011, 2013-2021 The JavaParser Team.
- *
- * This file is part of JavaParser.
- *
- * JavaParser can be used either under the terms of
- * a) the GNU Lesser General Public License as published by
- *     the Free Software Foundation, either version 3 of the License, or
- *     (at your option) any later version.
- * b) the terms of the Apache License
- *
- * You should have received a copy of both licenses in LICENCE.LGPL and
- * LICENCE.APACHE. Please refer to those files for details.
- *
- * JavaParser is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- */
-package com.github.javaparser.printer.lexicalpreservation;
-
-import java.util.Iterator;
-
-public class WrappingRangeIterator implements Iterator<Integer> {
-
-    private final int limit;
-
-    private int currentValue = 0;
-
-    public WrappingRangeIterator(int limit) {
-        this.limit = limit;
-    }
-
-    @Override
-    public boolean hasNext() {
-        return true;
-    }
-
-    @Override
-    public Integer next() {
-        int valueToReturn = currentValue;
-        ++currentValue;
-        if (currentValue == limit) {
-            currentValue = 0;
-        }
-        return valueToReturn;
-    }
-}
