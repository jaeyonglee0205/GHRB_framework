diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
index 3b6da59d6..ba190be4b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
@@ -425,34 +425,22 @@ public abstract class AbstractExpressionHandler {
      * @return            the first ast of the expression
      */
     protected static DetailAST getFirstAstNode(DetailAST ast) {
-        return getFirstAst(ast, ast);
-    }
 
-    /**
-     * Get the first ast for given expression.
-     *
-     * @param ast         the current ast that may have minimum line number
-     * @param tree        the expression to find the first line for
-     *
-     * @return the first ast of the expression
-     */
-    private static DetailAST getFirstAst(DetailAST ast, DetailAST tree) {
+        DetailAST curNode = ast;
         DetailAST realStart = ast;
-
-        if (tree.getLineNo() < realStart.getLineNo()
-            || tree.getLineNo() == realStart.getLineNo()
-            && tree.getColumnNo() < realStart.getColumnNo()
-        ) {
-            realStart = tree;
-        }
-
-        // check children
-        for (DetailAST node = tree.getFirstChild();
-            node != null;
-            node = node.getNextSibling()) {
-            realStart = getFirstAst(realStart, node);
+        while (curNode != null) {
+            if (curNode.getLineNo() < realStart.getLineNo()
+                    || curNode.getLineNo() == realStart.getLineNo()
+                    && curNode.getColumnNo() < realStart.getColumnNo()) {
+                realStart = curNode;
+            }
+            DetailAST toVisit = curNode.getFirstChild();
+            while (curNode != ast && toVisit == null) {
+                toVisit = curNode.getNextSibling();
+                curNode = curNode.getParent();
+            }
+            curNode = toVisit;
         }
-
         return realStart;
     }
 
