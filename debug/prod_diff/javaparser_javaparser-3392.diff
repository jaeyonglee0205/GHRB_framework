diff --git a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java
index 46257e83f..9c6aae360 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java
@@ -296,13 +296,25 @@ public class LexicalPreservingPrinter {
             if (index <= 0) {
                 return;
             }
+            
+            TextElement currentSpaceCandidate = null;
 
             for (int i = index - 1; i >= 0; i--) {
                 TextElement spaceCandidate = nodeText.getTextElement(i);
+                if (spaceCandidate.isSpaceOrTab()) {
+                    // save the current indentation char
+                    currentSpaceCandidate = nodeText.getTextElement(i);
+                }
                 if (!spaceCandidate.isSpaceOrTab()) {
                     if (spaceCandidate.isNewline() && i != index - 1) {
                         for (int j = 0; j < (index - 1) - i; j++) {
-                            nodeText.addElement(index, new TokenTextElement(JavaToken.Kind.SPACE.getKind()));
+                            if (currentSpaceCandidate != null) {
+                                // use the current (or last) indentation character 
+                                nodeText.addElement(index, new TokenTextElement(JavaToken.Kind.SPACE.getKind(), currentSpaceCandidate.expand()));
+                            } else {
+                                // use the default indentation character 
+                                nodeText.addElement(index, new TokenTextElement(JavaToken.Kind.SPACE.getKind()));
+                            }
                         }
                     }
                     break;
