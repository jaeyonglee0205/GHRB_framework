diff --git a/javaparser-core/src/main/java/com/github/javaparser/ast/observer/ObservableProperty.java b/javaparser-core/src/main/java/com/github/javaparser/ast/observer/ObservableProperty.java
index 6ff2deace..9382c6554 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/ast/observer/ObservableProperty.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/ast/observer/ObservableProperty.java
@@ -20,16 +20,16 @@
  */
 package com.github.javaparser.ast.observer;
 
-import com.github.javaparser.ast.Generated;
-import com.github.javaparser.ast.Node;
-import com.github.javaparser.ast.NodeList;
-import com.github.javaparser.utils.Utils;
-
 import java.lang.reflect.InvocationTargetException;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Optional;
 
+import com.github.javaparser.ast.Generated;
+import com.github.javaparser.ast.Node;
+import com.github.javaparser.ast.NodeList;
+import com.github.javaparser.utils.Utils;
+
 /**
  * Properties considered by the AstObserver
  */
@@ -287,14 +287,7 @@ public enum ObservableProperty {
     }
 
     public boolean isNullOrNotPresent(Node node) {
-        Object result = getRawValue(node);
-        if (result == null) {
-            return true;
-        }
-        if (result instanceof Optional) {
-            return !((Optional) result).isPresent();
-        }
-        return false;
+    	return Utils.valueIsNullOrEmptyStringOrOptional(getRawValue(node));
     }
 
     public boolean isNullOrEmpty(Node node) {
diff --git a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/Change.java b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/Change.java
index 826c0a836..bd89503a9 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/Change.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/Change.java
@@ -39,11 +39,77 @@ public interface Change {
             case IS_EMPTY:
                 return Utils.valueIsNullOrEmpty(getValue(csmConditional.getProperty(), node));
             case IS_PRESENT:
-                return !Utils.valueIsNullOrEmptyStringOrOptional(getValue(csmConditional.getProperty(), node));
+                return !Utils.valueIsNullOrEmptyStringOrOptional(getValue(csmConditional.getProperty(), node))
+                		&& !isEvaluatedOnDerivedProperty(csmConditional.getProperty());
             default:
                 throw new UnsupportedOperationException("" + csmConditional.getProperty() + " " + csmConditional.getCondition());
         }
     }
 
+	/*
+	 * Evaluate on derived property.
+	 *
+	 * Currently the evaluation of the conditions is carried out in relation to the
+	 * presence of value in the field/attribute of a class referenced by a property
+	 * (for example the BODY property is referenced to the body field in the
+	 * LambdaExpr class) but this is not quite correct.
+	 *
+	 * Indeed, there are attributes that are derived. The meaning of a derived
+	 * attribute (annotated with the DerivedProperty annotation) is not very clear.
+	 * Assuming that it is an existing attribute and accessible by another property,
+	 * for example this is the case for the EXPRESSION_BODY property which allows
+	 * access to a derived field (which is also accessible by the BODY property).
+	 *
+	 * The 2 properties EXPRESSION_BODY and BODY have a different meaning because
+	 * one references a simple expression while the other references a list of
+	 * expressions (this distinction is particularly interesting in the case of
+	 * lambda expressions).
+	 *
+	 * In this particular case, the verification of the condition defined in the
+	 * syntax model used by LPP must not succeed if the nature of the property is
+	 * modified. So if we modify a lamba expression composed of a single expression
+	 * by replacing it with a list of expressions, the evaluation of a condition
+	 * relating to the presence of the EXPRESSION_BODY property, which makes it
+	 * possible to determine the nature of the change, cannot not lead to a verified
+	 * proposition which could be the case if we only consider that the field
+	 * referenced by the EXPRESSION_BODY property has an acceptable value before the
+	 * actual modification.
+	 *
+	 * This is why we also check if it is a derived property whose name coincides
+	 * (*) with the updated property. If this is the case, we admit that the
+	 * verification of the condition must fail so that we can execute the else
+	 * clause of the condition. I'm not sure this issue #3949 is completely resolved
+	 * by this change.
+	 *
+	 * (*) Assuming that by convention the derived property is suffixed with the
+	 * name of the property it derives from (e.g.. EXPRESSION_BODY which matches an
+	 * expression would derive from BODY which matches a list of expressions), we
+	 * could deduce that EXPRESSION_BODY and BODY actually represent the same field
+	 * but the validation condition must not be checked.
+	 */
+    default boolean isEvaluatedOnDerivedProperty(ObservableProperty property) {
+    	ObservableProperty currentProperty = getProperty();
+		/*
+		 * By convention we admit that the derived property is suffixed with the name of
+		 * the property it derives from (e.g. EXPRESSION_BODY which matches an
+		 * expression would derive from BODY which matches a list of expressions), so we
+		 * could deduce that EXPRESSION_BODY and BODY actually represent the same
+		 * field but the validation condition must not be checked.
+		 * Be careful because NoChange property must not affect this evaluation.
+		 */
+    	return currentProperty != null
+    			&& (property.isDerived()
+    					&& property.name().endsWith(currentProperty.name()));
+    }
+
+	/*
+	 * Assuming that by convention the derived property is suffixed
+	 * with the name of the property it derives from (e.g. EXPRESSION_BODY which
+	 * matches an expression vs a list of expressions would derive from BODY) We
+	 * could deduce that EXPRESSION_BODY and BODY actually represent the same
+	 * property but the validation condition is not checked.
+	 */
+    ObservableProperty getProperty();
+
     Object getValue(ObservableProperty property, Node node);
 }
diff --git a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListAdditionChange.java b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListAdditionChange.java
index 88b04951f..029cd0de8 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListAdditionChange.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListAdditionChange.java
@@ -20,12 +20,12 @@
  */
 package com.github.javaparser.printer.lexicalpreservation.changes;
 
+import java.util.Optional;
+
 import com.github.javaparser.ast.Node;
 import com.github.javaparser.ast.NodeList;
 import com.github.javaparser.ast.observer.ObservableProperty;
 
-import java.util.Optional;
-
 /**
  * The Addition of an element to a list.
  */
@@ -66,4 +66,9 @@ public class ListAdditionChange implements Change {
             return new NoChange().getValue(property, node);
         }
     }
+
+	@Override
+	public ObservableProperty getProperty() {
+		return observableProperty;
+	}
 }
diff --git a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListRemovalChange.java b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListRemovalChange.java
index 2616f8c08..888770b62 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListRemovalChange.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListRemovalChange.java
@@ -20,12 +20,12 @@
  */
 package com.github.javaparser.printer.lexicalpreservation.changes;
 
+import java.util.Optional;
+
 import com.github.javaparser.ast.Node;
 import com.github.javaparser.ast.NodeList;
 import com.github.javaparser.ast.observer.ObservableProperty;
 
-import java.util.Optional;
-
 /**
  * The removal of an element from a list.
  */
@@ -64,4 +64,9 @@ public class ListRemovalChange implements Change {
             return new NoChange().getValue(property, node);
         }
     }
+
+    @Override
+	public ObservableProperty getProperty() {
+		return observableProperty;
+	}
 }
diff --git a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListReplacementChange.java b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListReplacementChange.java
index 50b7b6a76..a63a7b512 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListReplacementChange.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/ListReplacementChange.java
@@ -20,12 +20,12 @@
  */
 package com.github.javaparser.printer.lexicalpreservation.changes;
 
+import java.util.Optional;
+
 import com.github.javaparser.ast.Node;
 import com.github.javaparser.ast.NodeList;
 import com.github.javaparser.ast.observer.ObservableProperty;
 
-import java.util.Optional;
-
 /**
  * The replacement of an element in a list.
  */
@@ -66,4 +66,9 @@ public class ListReplacementChange implements Change {
             return new NoChange().getValue(property, node);
         }
     }
+
+    @Override
+	public ObservableProperty getProperty() {
+		return observableProperty;
+	}
 }
diff --git a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/NoChange.java b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/NoChange.java
index 50ca88117..f8774fd7f 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/NoChange.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/NoChange.java
@@ -32,4 +32,9 @@ public class NoChange implements Change {
     public Object getValue(ObservableProperty property, Node node) {
         return property.getRawValue(node);
     }
+
+    @Override
+	public ObservableProperty getProperty() {
+		return null;
+	}
 }
diff --git a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/PropertyChange.java b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/PropertyChange.java
index 86c3966e3..57998eafb 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/PropertyChange.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/changes/PropertyChange.java
@@ -40,7 +40,8 @@ public class PropertyChange implements Change {
         this.newValue = newValue;
     }
 
-    public ObservableProperty getProperty() {
+    @Override
+	public ObservableProperty getProperty() {
         return property;
     }
 
@@ -56,8 +57,7 @@ public class PropertyChange implements Change {
     public Object getValue(ObservableProperty property, Node node) {
         if (property == this.property) {
             return newValue;
-        } else {
-            return property.getRawValue(node);
         }
+        return property.getRawValue(node);
     }
 }
